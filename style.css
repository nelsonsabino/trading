/* --- GERAL & TIPOGRAFIA --- */
body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; line-height: 1.6; background-color: #f8f9fa; color: #343a40; margin: 0; }
main { max-width: 1400px; margin: auto; padding: 0 2rem 2rem 2rem; }
h1, h2, h3 { font-weight: 600; }
h2 { color: #495057; border-bottom: 2px solid #e9ecef; padding-bottom: 0.5rem; margin-bottom: 1.5rem; }

/* --- CABEÇALHO E NAVEGAÇÃO --- */
header { text-align: center; padding: 2rem 1rem; background-color: #fff; border-bottom: 1px solid #dee2e6; margin-bottom: 2rem; }
.mantra { font-style: italic; color: #6c757d; }
header nav { margin-top: 1.5rem; display: flex; justify-content: center; align-items: center; gap: 1rem; flex-wrap: wrap; }

/* --- ESTILO DE BOTÕES CONSISTENTE --- */
.btn, .nav-link { display: inline-block; padding: 10px 20px; font-size: 1rem; font-weight: 600; text-align: center; text-decoration: none; border: none; border-radius: 6px; cursor: pointer; transition: all 0.2s ease-in-out; }
.btn-primary, #add-opportunity-btn { background-color: #007bff; color: white; }
.btn-primary:hover, #add-opportunity-btn:hover { background-color: #0056b3; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
.nav-link { background-color: #6c757d; color: white; }
.nav-link:hover { background-color: #5a6268; transform: translateY(-2px); }

/* --- DASHBOARD E COLUNAS --- */
.dashboard-columns { display: grid; grid-template-columns: repeat(3, 1fr); gap: 2rem; }
.potential-trades, .armed-trades, .live-trades { background-color: #fff; padding: 1.5rem; border-radius: 8px; border-top: 4px solid #6c757d; }
.armed-trades { border-top-color: #ffc107; }
.live-trades { border-top-color: #28a745; }

/* --- CARDS DE TRADE --- */
.trade-card { position: relative; background: #fdfdfd; border: 1px solid #e9ecef; padding: 1rem 1.5rem; border-radius: 6px; margin-bottom: 1rem; transition: box-shadow 0.2s ease-in-out; border-left: 5px solid #6c757d; }
.trade-card:hover { box-shadow: 0 5px 15px rgba(0,0,0,0.08); }
.trade-card.armed { border-left-color: #ffc107; }
.trade-card.live { border-left-color: #28a745; }
.trade-card h3 { margin-top: 0; margin-bottom: 0.5rem; }
.trade-card p { margin: 0.25rem 0; font-size: 0.95em; color: #495057; }
.trade-card .card-screenshot { width: 100%; height: auto; margin-top: 1rem; border-radius: 4px; cursor: pointer; border: 1px solid #e9ecef; }
.trigger-btn { width: 100%; margin-top: 1rem; padding: 8px; font-weight: 600; color: #fff; border-radius: 4px; border: none; cursor: pointer; transition: opacity 0.2s; box-sizing: border-box; }
.trigger-btn:hover { opacity: 0.85; }
.btn-potential { background-color: #ffc107; color: #212529; }
.btn-armed { background-color: #28a745; }
.btn-live, .trigger-btn.close-trade-btn { background-color: #dc3545; }
.card-edit-btn { background-color: #ffc107; color: #212529; padding: 4px 8px; font-size: 0.8em; border-radius: 4px; border: none; cursor: pointer; position: absolute; top: 1rem; right: 1.5rem; opacity: 0; transition: opacity 0.2s; }
.trade-card:hover .card-edit-btn { opacity: 1; }
.empty-state-message { color: #6c757d; text-align: center; padding: 2rem 0; }

/* --- MODAIS E FORMULÁRIOS --- */
.modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(33, 37, 41, 0.6); display: none; justify-content: center; align-items: center; z-index: 1000; box-sizing: border-box; overflow-y: auto; padding: 2rem 1rem; }
.modal-content { background: #fff; padding: 2rem 2.5rem; border-radius: 12px; width: 100%; max-width: 550px; position: relative; box-shadow: 0 10px 25px rgba(0,0,0,0.1); animation: fadeIn 0.3s ease-out; margin: auto; }
@keyframes fadeIn { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } }

/* Adicione esta nova regra ao seu style.css */
.modal-overlay.visible {
    display: flex !important;
}

.modal-content > span[id^="close-"] { position: absolute; top: 15px; right: 25px; font-size: 2.5rem; color: #adb5bd; font-weight: 300; cursor: pointer; line-height: 1; transition: color 0.2s; }
.modal-content > span[id^="close-"]:hover { color: #495057; }
.modal-content h3 { margin-top: 0; margin-bottom: 0.5rem; color: #212529; }
.modal-content p { margin-top: 0; margin-bottom: 2rem; color: #6c757d; border-bottom: 1px solid #e9ecef; padding-bottom: 1rem; }
.modal-content h4 { margin-top: 1.5rem; margin-bottom: 1rem; font-size: 1.1rem; color: #007bff; }
.input-item { margin-bottom: 1.25rem; }
.input-item label, .radio-group > label { display: block; margin-bottom: 8px; font-weight: 500; color: #495057; }
.input-item input, .input-item select, .input-item textarea { width: 100%; padding: 12px; font-size: 1rem; border: 1px solid #ced4da; border-radius: 6px; box-sizing: border-box; transition: border-color 0.2s, box-shadow 0.2s; }
.input-item input:focus, .input-item select:focus, .input-item textarea:focus { outline: none; border-color: #80bdff; box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }
.checklist-item { display: flex; align-items: center; margin-bottom: 1rem; padding: 10px; background-color: #f8f9fa; border-radius: 6px; }
.checklist-item input { margin-right: 12px; transform: scale(1.2); flex-shrink: 0; }
.checklist-item label { line-height: 1.4; }
.radio-group { margin-top: 1.5rem; padding: 1rem; border: 1px solid #e9ecef; border-radius: 6px; }
.form-footnote { font-size: 0.8em; color: #6c757d; text-align: right; margin-top: -0.5rem; margin-bottom: 1.5rem; }
.required-asterisk { color: #dc3545; font-weight: bold; margin-left: 4px; }
.modal-content form button[type="submit"] { width: 100%; padding: 14px; margin-top: 1.5rem; font-size: 1.1rem; font-weight: 600; background-color: #28a745; color: white; border: none; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; }
.modal-content form button[type="submit"]:hover { background-color: #218838; }



/* --- ESTILOS PARA EXEMPLOS NOS MODAIS --- */
.example-image-container { margin-bottom: 1.5rem; border: 1px solid #dee2e6; border-radius: 8px; padding: 0.5rem; }
.example-image-container img { width: 100%; height: auto; display: block; border-radius: 4px; cursor: pointer; }
.example-image-container p { font-size: 0.85em; text-align: center; margin: 0.5rem 0 0 0; color: #6c757d; padding-bottom: 0; border-bottom: none; }

/* --- PÁGINA DE GESTÃO (manage.html) --- */
#trades-table { width: 100%; border-collapse: collapse; margin-top: 2rem; background: #fff; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); overflow: hidden; font-size: 0.95em; }
#trades-table thead tr { background-color: #f8f9fa; border-bottom: 2px solid #dee2e6; }
#trades-table th { padding: 1rem; text-align: left; font-weight: 600; color: #495057; text-transform: uppercase; letter-spacing: 0.5px; }
#trades-table td { padding: 1rem; border-bottom: 1px solid #e9ecef; vertical-align: middle; }
#trades-table tbody tr:last-child td { border-bottom: none; }
.action-buttons { display: flex; gap: 0.5rem; }
.action-buttons .btn { padding: 6px 12px; font-size: 0.9em; font-weight: 500; border-radius: 5px; }
.action-buttons .edit-btn { background-color: #ffc107; color: #212529; }
.action-buttons .edit-btn:hover { background-color: #e0a800; }
.action-buttons .delete-btn { background-color: #dc3545; color: white; }
.action-buttons .delete-btn:hover { background-color: #c82333; }
.status-badge { padding: 4px 10px; border-radius: 16px; color: white; font-size: 0.85em; font-weight: 600; text-transform: uppercase; display: inline-block; }
.status-badge.status-potential { background-color: #6c757d; }
.status-badge.status-armed { background-color: #ffc107; color: #212529; }
.status-badge.status-live { background-color: #28a745; }
.status-badge.status-closed { background-color: #343a40; }
.positive-pnl { color: #28a745; font-weight: bold; }
.negative-pnl { color: #dc3545; font-weight: bold; }

/* --- PÁGINA DE ESTATÍSTICAS (stats.html) --- */
.stats-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 1.5rem; }
.stat-card { background-color: #fff; padding: 1.5rem; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.08); text-align: center; }
.stat-card h4 { margin-top: 0; margin-bottom: 0.5rem; color: #6c757d; font-size: 1em; }
.stat-card p { margin: 0; font-size: 2em; font-weight: bold; color: #343a40; }
.pnl-value.positive-pnl { color: #28a745; }
.pnl-value.negative-pnl { color: #dc3545; }
.detailed-stats { margin-top: 3rem; }
.detailed-stats h2 { font-size: 1.5em; }
.detailed-stats table { width: 100%; margin-top: 1rem; }
.detailed-stats .positive-pnl { color: #28a745; font-weight: bold; }
.detailed-stats .negative-pnl { color: #dc3545; font-weight: bold; }

/* --- RESPONSIVIDADE --- */
@media (max-width: 992px) { .dashboard-columns { grid-template-columns: 1fr 1fr; } }
@media (max-width: 768px) { .dashboard-columns { grid-template-columns: 1fr; } main { padding: 0 1rem 1rem 1rem; } }




/* --- NOVOS ESTILOS PARA A PÁGINA DE ESTATÍSTICAS --- */
.portfolio-section {
    background-color: #fff;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.08);
    text-align: center;
    margin-bottom: 2rem;
}

.portfolio-balance {
    font-size: 1.5rem;
    color: #495057;
}

.portfolio-balance strong {
    font-size: 2.5rem;
    color: #28a745; /* Verde para o saldo */
    margin-left: 1rem;
}

.portfolio-actions {
    margin-top: 1.5rem;
    display: flex;
    justify-content: center;
    gap: 1rem;
}
.btn-secondary { /* Um novo estilo para o botão de levantamento */
    background-color: #6c757d;
    color: white;
}
.btn-secondary:hover {
    background-color: #5a6268;
}

.btn-tertiary {
    background-color: #ffc107; /* Amarelo */
    color: #212529;
}
.btn-tertiary:hover {
    background-color: #e0a800;
}

.section-divider {
    border: none;
    border-top: 1px solid #dee2e6;
    margin: 3rem 0;
}

/* --- FOOTER DE VERSÃO --- */
footer {
    text-align: center;
    padding: 1rem 0;
    margin-top: 2rem;
    color: #6c757d; /* Cinzento discreto */
    font-size: 0.9em;
    border-top: 1px solid #e9ecef;
}

/* --- NOVOS ESTILOS PARA FORMULÁRIOS E CHECKLISTS --- */

/* Melhora o título da secção dentro do modal */
.modal-content h4 {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    font-size: 1.1rem;
    color: #007bff;
    border-bottom: 2px solid #e9ecef;
    display: flex;
    align-items: center;
}

/* Estilo principal do item da checklist */
.checklist-item, .input-item-styled {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    padding: 1rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    transition: all 0.2s ease-in-out;
}

.checklist-item:hover, .input-item-styled:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0,0,0,0.07);
    border-left: 3px solid #007bff;
}

/* Estilo do ícone */
.checklist-item i, .input-item-styled i {
    font-size: 1.5rem; /* Tamanho do ícone */
    color: #495057;   /* Cor do ícone */
    margin-right: 1.25rem;
    width: 25px;      /* Largura fixa para alinhamento */
    text-align: center;
}

/* Aumenta o tamanho do input do checkbox para ser mais fácil de clicar */
.checklist-item input[type="checkbox"] {
    transform: scale(1.4);
    margin-right: 1.25rem;
    flex-shrink: 0;
}

/* Remove margens e padding padrão do label para o flexbox controlar */
.checklist-item label {
    margin: 0;
    padding: 0;
    line-height: 1.4;
    font-weight: 500;
}

/* Estilo para o asterisco de campo obrigatório */
.required-asterisk {
    color: #dc3545;
    font-weight: bold;
    margin-left: 5px;
    font-size: 1.1em;
}


/* --- ESTILOS PARA O CRIADOR DE ALARMES INDEPENDENTE --- */
.alarm-creator-section {
    background-color: #fff;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    margin: 2rem auto;
    max-width: 1400px;
}
.alarm-creator-section h2 {
    border-bottom: none;
    margin-bottom: 1.5rem;
    text-align: center;
}
.alarm-form-standalone .form-row {
    display: flex;
    gap: 1.5rem;
    align-items: flex-end;
    flex-wrap: wrap;
    margin-bottom: 1.5rem;
}
.alarm-form-standalone .input-item {
    flex: 1;
    min-width: 200px;
}
.alarm-form-standalone label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}
.alarm-form-standalone input, .alarm-form-standalone select {
    width: 100%;
    padding: 12px;
    font-size: 1rem;
    border: 1px solid #ced4da;
    border-radius: 6px;
    box-sizing: border-box;
}
.alarm-feedback {
    margin-top: 1rem;
    font-weight: 500;
    text-align: center;
    min-height: 20px;
}

/* --- ESTILOS PARA O AUTOCOMPLETE DE ALARMES --- */
.autocomplete-results {
    display: none; /* Escondido por defeito */
    position: absolute;
    border: 1px solid #ddd;
    border-top: none;
    z-index: 99;
    top: 100%;
    left: 0;
    right: 0;
    max-height: 200px;
    overflow-y: auto;
    background-color: #fff;
    box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    border-radius: 0 0 6px 6px;
}
.autocomplete-item {
    padding: 12px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
    display: flex;
    align-items: center;
}
.autocomplete-item:last-child {
    border-bottom: none;
}
.autocomplete-item:hover {
    background-color: #f1f1f1;
}
.autocomplete-item strong {
    color: #007bff;
}

/* --- ESTILOS PARA AS TABELAS DE ALARMES --- */
.alarms-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1.5rem;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    overflow: hidden;
    font-size: 0.95em;
}
.alarms-table thead tr {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
}
.alarms-table th {
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: #495057;
}
.alarms-table td {
    padding: 1rem;
    border-bottom: 1px solid #e9ecef;
    vertical-align: middle;
}
.alarms-table tbody tr:last-child td {
    border-bottom: none;
}
.alarms-table .condition-above {
    color: #198754; /* Verde */
    font-weight: bold;
}
.alarms-table .condition-below {
    color: #dc3545; /* Vermelho */
    font-weight: bold;
}

/* --- ESTILOS ADICIONAIS PARA BOTÕES DE AÇÃO --- */

/* Wrapper para alinhar os botões do formulário principal */
.form-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
}

/* Reutiliza o estilo do botão de edição que já tínhamos */
.alarms-table .edit-btn {
    background-color: #ffc107; /* Amarelo */
    color: #212529;
}
.alarms-table .edit-btn:hover {
    background-color: #e0a800;
}

// js/alarms.js (VERSÃO COM EDIÇÃO E EXCLUSÃO DO HISTÓRICO)

import { supabaseUrl, supabaseAnonKey } from './config.js';
import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';

const supabase = createClient(supabaseUrl, supabaseAnonKey);
let selectedCoin = null;
let debounceTimer;
let editingAlarmId = null; // A nossa variável de estado: null = modo de criação, ID = modo de edição

// --- FUNÇÃO PRINCIPAL PARA BUSCAR E MOSTRAR TODOS OS ALARMES ---
async function fetchAndDisplayAlarms() {
    const activeTbody = document.getElementById('active-alarms-tbody');
    const triggeredTbody = document.getElementById('triggered-alarms-tbody');
    if (!activeTbody || !triggeredTbody) return;

    try {
        activeTbody.innerHTML = '<tr><td colspan="5">A carregar...</td></tr>';
        triggeredTbody.innerHTML = '<tr><td colspan="6">A carregar...</td></tr>';

        const { data, error } = await supabase.from('alarms').select('*').order('created_at', { ascending: false });
        if (error) throw error;
        
        const activeAlarmsHtml = [];
        const triggeredAlarmsHtml = [];

        window.alarmsData = data; // Guarda os dados globalmente para fácil acesso na edição

        for (const alarm of data) {
            const conditionClass = alarm.condition === 'above' ? 'condition-above' : 'condition-below';
            const conditionText = alarm.condition === 'above' ? 'Acima de' : 'Abaixo de';
            const formattedDate = new Date(alarm.created_at).toLocaleString('pt-PT');
            const assetDisplay = `${alarm.asset_id} (${alarm.asset_symbol})`;

            if (alarm.status === 'active') {
                activeAlarmsHtml.push(`
                    <tr>
                        <td><strong>${assetDisplay}</strong></td>
                        <td class="${conditionClass}">${conditionText}</td>
                        <td>${alarm.target_price} USD</td>
                        <td>${formattedDate}</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn edit-btn" data-id="${alarm.id}">Editar</button>
                                <button class="btn delete-btn" data-id="${alarm.id}">Apagar</button>
                            </div>
                        </td>
                    </tr>
                `);
            } else {
                triggeredAlarmsHtml.push(`
                    <tr>
                        <td><strong>${assetDisplay}</strong></td>
                        <td class="${conditionClass}">${conditionText}</td>
                        <td>${alarm.target_price} USD</td>
                        <td><span class="status-badge status-closed">Disparado</span></td>
                        <td>${formattedDate}</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn delete-btn" data-id="${alarm.id}">Apagar</button>
                            </div>
                        </td>
                    </tr>
                `);
            }
        }

        activeTbody.innerHTML = activeAlarmsHtml.length > 0 ? activeAlarmsHtml.join('') : '<tr><td colspan="5" style="text-align:center;">Nenhum alarme ativo.</td></tr>';
        triggeredTbody.innerHTML = triggeredAlarmsHtml.length > 0 ? triggeredAlarmsHtml.join('') : '<tr><td colspan="6" style="text-align:center;">Nenhum alarme no histórico.</td></tr>';

    } catch (error) {
        console.error("Erro ao buscar alarmes:", error);
    }
}

// --- FUNÇÃO PARA APAGAR UM ALARME (ATIVO OU DO HISTÓRICO) ---
async function deleteAlarm(alarmId) {
    const confirmationText = "Tem a certeza que quer apagar este registo? Esta ação é irreversível.";
    if (!confirm(confirmationText)) return;
    try {
        const { error } = await supabase.from('alarms').delete().eq('id', alarmId);
        if (error) throw error;
        fetchAndDisplayAlarms();
    } catch (error) {
        console.error("Erro ao apagar alarme:", error);
        alert("Não foi possível apagar o alarme.");
    }
}

// --- FUNÇÕES PARA GERIR O MODO DE EDIÇÃO ---
function enterEditMode(alarm) {
    editingAlarmId = alarm.id;
    selectedCoin = { id: alarm.asset_id, name: alarm.asset_id, symbol: alarm.asset_symbol }; // Preenche os dados da moeda

    document.getElementById('alarm-asset').value = `${alarm.asset_id} (${alarm.asset_symbol})`;
    document.getElementById('alarm-condition-standalone').value = alarm.condition;
    document.getElementById('alarm-price-standalone').value = alarm.target_price;
    
    document.querySelector('#alarm-form button[type="submit"]').textContent = 'Atualizar Alarme';
    document.getElementById('cancel-edit-btn').style.display = 'inline-block';
    
    window.scrollTo({ top: 0, behavior: 'smooth' }); // Rola a página para o topo
}

function exitEditMode() {
    editingAlarmId = null;
    selectedCoin = null;

    document.getElementById('alarm-form').reset();
    document.querySelector('#alarm-form button[type="submit"]').textContent = 'Definir Alarme';
    document.getElementById('cancel-edit-btn').style.display = 'none';
}


// --- LÓGICA PRINCIPAL QUANDO A PÁGINA CARREGA ---
document.addEventListener('DOMContentLoaded', () => {
    fetchAndDisplayAlarms();

    const alarmForm = document.getElementById('alarm-form');
    const feedbackDiv = document.getElementById('alarm-feedback');
    const assetInput = document.getElementById('alarm-asset');
    const resultsDiv = document.getElementById('autocomplete-results');
    const mainContainer = document.querySelector('main');

    // Listener unificado para todos os cliques em botões nas tabelas
    mainContainer.addEventListener('click', (e) => {
        const target = e.target;
        if (target.classList.contains('delete-btn')) {
            const alarmId = target.getAttribute('data-id');
            deleteAlarm(alarmId);
        }
        if (target.classList.contains('edit-btn')) {
            const alarmId = target.getAttribute('data-id');
            const alarmToEdit = window.alarmsData.find(a => a.id === alarmId);
            if (alarmToEdit) {
                enterEditMode(alarmToEdit);
            }
        }
    });

    document.getElementById('cancel-edit-btn').addEventListener('click', exitEditMode);

    // Lógica do Autocomplete (inalterada)
    assetInput.addEventListener('input', () => {
        clearTimeout(debounceTimer);
        const query = assetInput.value.trim();
        if (editingAlarmId) exitEditMode(); // Sai do modo de edição se o utilizador começar a digitar

        if (query.length < 2) {
            resultsDiv.style.display = 'none';
            return;
        }

        debounceTimer = setTimeout(async () => {
            try {
                const { data: results, error } = await supabase.functions.invoke('search-coins', { body: { query } });
                if (error) throw error;

                resultsDiv.innerHTML = '';
                if (results.length > 0) {
                    results.forEach(coin => {
                        const item = document.createElement('div');
                        item.className = 'autocomplete-item';
                        item.innerHTML = `<img src="${coin.thumb}" width="20" height="20" style="margin-right: 10px;"> <strong>${coin.name}</strong> (${coin.symbol.toUpperCase()})`;
                        item.addEventListener('click', () => {
                            assetInput.value = `${coin.name} (${coin.symbol.toUpperCase()})`;
                            selectedCoin = coin;
                            resultsDiv.style.display = 'none';
                        });
                        resultsDiv.appendChild(item);
                    });
                    resultsDiv.style.display = 'block';
                } else {
                    resultsDiv.style.display = 'none';
                }
            } catch (err) {
                console.error("Erro ao buscar moedas:", err);
            }
        }, 300);
    });

    document.addEventListener('click', (e) => { if (e.target !== assetInput) resultsDiv.style.display = 'none'; });

    // Lógica de Submissão (agora cria OU atualiza)
    alarmForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitButton = alarmForm.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        feedbackDiv.textContent = 'A processar...';
        
        try {
            if (!selectedCoin) {
                throw new Error("Por favor, selecione uma moeda válida da lista de sugestões.");
            }

            const targetPrice = parseFloat(document.getElementById('alarm-price-standalone').value);
            if (isNaN(targetPrice) || targetPrice <= 0) {
                throw new Error("Por favor, preencha um preço alvo válido.");
            }
            
            const alarmData = {
                asset_id: selectedCoin.id,
                asset_symbol: selectedCoin.symbol.toUpperCase(),
                condition: document.getElementById('alarm-condition-standalone').value,
                target_price: targetPrice
            };

            let error;
            if (editingAlarmId) {
                // MODO DE EDIÇÃO
                const { error: updateError } = await supabase.from('alarms').update(alarmData).eq('id', editingAlarmId);
                error = updateError;
            } else {
                // MODO DE CRIAÇÃO
                alarmData.status = 'active'; // Adiciona o status apenas ao criar
                const { error: insertError } = await supabase.from('alarms').insert([alarmData]);
                error = insertError;
            }

            if (error) throw error;

            feedbackDiv.textContent = `✅ Operação concluída com sucesso!`;
            feedbackDiv.style.color = '#28a745';
            exitEditMode();
            fetchAndDisplayAlarms();

        } catch (error) {
            console.error("Erro na operação do alarme:", error);
            feedbackDiv.textContent = `Erro: ${error.message}`;
            feedbackDiv.style.color = '#dc3545';
        } finally {
            submitButton.disabled = false;
        }
    });
});
